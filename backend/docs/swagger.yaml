openapi: 3.0.0
info:
  title: The Brothers Barbershop API
  version: 1.0.0
  description: |
    API para el sistema de gestión de la barbería The Brothers Barbershop.
    
    Esta API proporciona endpoints para:
    * Gestión de usuarios y autenticación
    * Gestión de barberos y sus perfiles
    * Gestión de servicios ofrecidos
    * Sistema de citas
    * Gestión de inventario
    * Sistema de ventas
    * Monitoreo y métricas del sistema
  contact:
    name: The Brothers Barbershop Support
    email: support@brothersbarbershop.com

servers:
  - url: http://localhost:3000/api/v1
    description: Servidor de desarrollo
  - url: https://api.brothersbarbershop.com/api/v1
    description: Servidor de producción

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan@example.com"
        role:
          type: string
          enum: [user, barber, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        phone:
          type: string
          example: "+573001234567"
        profilePicture:
          type: string
          example: "https://cloudinary.com/image.jpg"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Service:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          example: "Corte Clásico"
        description:
          type: string
          example: "Corte de cabello clásico con máquina y tijera"
        price:
          type: number
          example: 25000
        duration:
          type: number
          example: 45
        category:
          type: string
          enum: [corte, afeitado, lavado, combo, otro]
          example: "corte"
        isActive:
          type: boolean
          example: true
        image:
          type: object
          properties:
            public_id:
              type: string
            url:
              type: string
    
    Barber:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        specialty:
          type: string
          example: "Cortes modernos"
        experience:
          type: number
          example: 5
        description:
          type: string
          example: "Especialista en cortes modernos y fade"
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        schedule:
          type: object
          properties:
            monday:
              type: object
              properties:
                start:
                  type: string
                  example: "08:00"
                end:
                  type: string
                  example: "18:00"
                available:
                  type: boolean
                  example: true
        rating:
          type: object
          properties:
            average:
              type: number
              example: 4.5
            count:
              type: number
              example: 120
        isActive:
          type: boolean
          example: true
    
    Appointment:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        barber:
          $ref: '#/components/schemas/Barber'
        service:
          $ref: '#/components/schemas/Service'
        date:
          type: string
          format: date-time
          example: "2025-09-15T10:00:00.000Z"
        duration:
          type: number
          example: 45
        status:
          type: string
          enum: [pending, confirmed, completed, cancelled, no_show]
          example: "confirmed"
        price:
          type: number
          example: 25000
        notes:
          type: string
          example: "Cliente prefiere corte más corto en los lados"
    
    InventoryItem:
      type: object
      properties:
        _id:
          type: string
        code:
          type: string
          example: "PROD001"
        name:
          type: string
          example: "Shampoo Premium"
        description:
          type: string
          example: "Shampoo para todo tipo de cabello"
        category:
          type: string
          enum: [cannabicos, gorras, insumos, productos_pelo, lociones, ceras, geles, maquinas, accesorios, otros]
          example: "productos_pelo"
        stock:
          type: number
          example: 25
        minStock:
          type: number
          example: 5
        unitPrice:
          type: number
          example: 15000
        isActive:
          type: boolean
          example: true
    
    Sale:
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
          enum: [product, walkIn]
          example: "product"
        productId:
          type: string
          example: "507f1f77bcf86cd799439011"
        productName:
          type: string
          example: "Shampoo Premium"
        serviceId:
          type: string
          example: "507f1f77bcf86cd799439011"
        serviceName:
          type: string
          example: "Corte Clásico"
        quantity:
          type: number
          example: 2
        unitPrice:
          type: number
          example: 15000
        totalAmount:
          type: number
          example: 30000
        barberId:
          type: string
          example: "507f1f77bcf86cd799439011"
        barberName:
          type: string
          example: "Carlos Rodríguez"
    
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Mensaje de error"
        code:
          type: string
          example: "VALIDATION_ERROR"

paths:
  # AUTH ENDPOINTS
  /auth/register:
    post:
      tags:
        - Autenticación
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "Juan Pérez"
                email:
                  type: string
                  format: email
                  example: "juan@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                phone:
                  type: string
                  example: "+573001234567"
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Autenticación
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "juan@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Autenticación
      summary: Cerrar sesión
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Sesión cerrada exitosamente"

  # USER ENDPOINTS
  /users/profile:
    get:
      tags:
        - Usuarios
      summary: Obtener perfil del usuario actual
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
    
    put:
      tags:
        - Usuarios
      summary: Actualizar perfil del usuario
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Juan Carlos Pérez"
                phone:
                  type: string
                  example: "+573001234567"
      responses:
        '200':
          description: Perfil actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

  # SERVICE ENDPOINTS
  /services:
    get:
      tags:
        - Servicios
      summary: Obtener lista de servicios
      parameters:
        - in: query
          name: category
          schema:
            type: string
            enum: [corte, afeitado, lavado, combo, otro]
          description: Filtrar por categoría
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filtrar por estado activo
      responses:
        '200':
          description: Lista de servicios obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      services:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
    
    post:
      tags:
        - Servicios
      summary: Crear nuevo servicio (solo admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - duration
                - category
              properties:
                name:
                  type: string
                  example: "Corte Fade"
                description:
                  type: string
                  example: "Corte moderno con degradado"
                price:
                  type: number
                  example: 30000
                duration:
                  type: number
                  example: 60
                category:
                  type: string
                  enum: [corte, afeitado, lavado, combo, otro]
                  example: "corte"
      responses:
        '201':
          description: Servicio creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      service:
                        $ref: '#/components/schemas/Service'

  # BARBER ENDPOINTS
  /barbers:
    get:
      tags:
        - Barberos
      summary: Obtener lista de barberos
      parameters:
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filtrar por estado activo
      responses:
        '200':
          description: Lista de barberos obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      barbers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Barber'

  # APPOINTMENT ENDPOINTS
  /appointments:
    get:
      tags:
        - Citas
      summary: Obtener citas del usuario
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, completed, cancelled, no_show]
          description: Filtrar por estado
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filtrar por fecha (YYYY-MM-DD)
      responses:
        '200':
          description: Lista de citas obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      appointments:
                        type: array
                        items:
                          $ref: '#/components/schemas/Appointment'
    
    post:
      tags:
        - Citas
      summary: Crear nueva cita
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - barberId
                - serviceId
                - date
              properties:
                barberId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                serviceId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                date:
                  type: string
                  format: date-time
                  example: "2025-09-15T10:00:00.000Z"
                notes:
                  type: string
                  example: "Preferencia por corte más corto"
      responses:
        '201':
          description: Cita creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      appointment:
                        $ref: '#/components/schemas/Appointment'

  /appointments/{id}:
    put:
      tags:
        - Citas
      summary: Actualizar cita
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de la cita
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, completed, cancelled, no_show]
                  example: "confirmed"
                notes:
                  type: string
                  example: "Cita confirmada"
      responses:
        '200':
          description: Cita actualizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      appointment:
                        $ref: '#/components/schemas/Appointment'
    
    delete:
      tags:
        - Citas
      summary: Cancelar cita
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de la cita
      responses:
        '200':
          description: Cita cancelada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Cita cancelada exitosamente"

  # INVENTORY ENDPOINTS
  /inventory:
    get:
      tags:
        - Inventario
      summary: Obtener inventario
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
            enum: [cannabicos, gorras, insumos, productos_pelo, lociones, ceras, geles, maquinas, accesorios, otros]
          description: Filtrar por categoría
        - in: query
          name: lowStock
          schema:
            type: boolean
          description: Filtrar productos con stock bajo
      responses:
        '200':
          description: Inventario obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      inventory:
                        type: array
                        items:
                          $ref: '#/components/schemas/InventoryItem'
    
    post:
      tags:
        - Inventario
      summary: Agregar producto al inventario (solo admin/barber)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - name
                - category
                - stock
                - unitPrice
              properties:
                code:
                  type: string
                  example: "PROD001"
                name:
                  type: string
                  example: "Shampoo Premium"
                description:
                  type: string
                  example: "Shampoo para todo tipo de cabello"
                category:
                  type: string
                  enum: [cannabicos, gorras, insumos, productos_pelo, lociones, ceras, geles, maquinas, accesorios, otros]
                  example: "productos_pelo"
                stock:
                  type: number
                  example: 25
                minStock:
                  type: number
                  example: 5
                unitPrice:
                  type: number
                  example: 15000
      responses:
        '201':
          description: Producto agregado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/InventoryItem'

  # SALES ENDPOINTS
  /sales:
    get:
      tags:
        - Ventas
      summary: Obtener historial de ventas
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [product, walkIn]
          description: Filtrar por tipo de venta
        - in: query
          name: barberId
          schema:
            type: string
          description: Filtrar por barbero
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Fecha de inicio (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Fecha de fin (YYYY-MM-DD)
      responses:
        '200':
          description: Historial de ventas obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      sales:
                        type: array
                        items:
                          $ref: '#/components/schemas/Sale'
    
    post:
      tags:
        - Ventas
      summary: Registrar nueva venta
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - quantity
                - unitPrice
                - totalAmount
              properties:
                type:
                  type: string
                  enum: [product, walkIn]
                  example: "product"
                productId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                serviceId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                quantity:
                  type: number
                  example: 2
                unitPrice:
                  type: number
                  example: 15000
                totalAmount:
                  type: number
                  example: 30000
      responses:
        '201':
          description: Venta registrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      sale:
                        $ref: '#/components/schemas/Sale'

  # MONITORING ENDPOINTS
  /monitoring/health:
    get:
      tags:
        - Monitoreo
      summary: Estado de salud del sistema
      responses:
        '200':
          description: Estado del sistema
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  service:
                    type: string
                    example: "The Brothers Barber Shop API"
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "development"
                  uptime:
                    type: string
                    example: "2h 30m 15s"

security:
  - bearerAuth: []

tags:
  - name: Autenticación
    description: Endpoints para registro, login y logout
  - name: Usuarios
    description: Gestión de perfiles de usuario
  - name: Servicios
    description: Gestión de servicios de la barbería
  - name: Barberos
    description: Gestión de barberos y sus perfiles
  - name: Citas
    description: Sistema de gestión de citas
  - name: Inventario
    description: Gestión de inventario y productos
  - name: Ventas
    description: Sistema de registro de ventas
  - name: Monitoreo
    description: Endpoints de monitoreo y estado del sistema
