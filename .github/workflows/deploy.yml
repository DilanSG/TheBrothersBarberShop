name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_ENV: production
  CACHE_ENABLED: true
  CACHE_TTL: 300
  CACHE_MAX_KEYS: 500
  CI: true
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_LOGLEVEL: warn

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18'
        
    - name: Cache dependencies backend (SmartCache)
      uses: actions/cache@v4
      with:
        path: |
          backend/node_modules
          backend/.smartcache
          ~/.npm
        key: ${{ runner.os }}-smartcache-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-smartcache-backend-
          ${{ runner.os }}-backend-
          
    - name: Cache dependencias frontend
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          frontend/.vite
          ~/.npm
        key: ${{ runner.os }}-frontend-vite-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-vite-
          ${{ runner.os }}-frontend-
        
    - name: Initialize SmartCache system
      run: |
        echo "Inicializando sistema SmartCache"
        # Crear directorios de cache si no existen
        mkdir -p backend/.smartcache
        mkdir -p frontend/.vite/cache
        
    - name: Install backend dependencies
      run: |
        cd backend
        echo "Instalando dependencias del backend con SmartCache"
        npm ci --omit=dev --prefer-offline --legacy-peer-deps
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        echo "Instalando dependencias del frontend"
        npm ci --omit=dev --prefer-offline
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run backend tests (if any)
      run: |
        cd backend
        npm test || echo "No tests configured"
        
    - name: Deploy to Render
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{"ref": "'"${{ github.ref }}"'", "sha": "'"${{ github.sha }}"'"}' \
          --fail \
          --show-error \
          --silent
      env:
        RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        
    - name: Deployment Success
      if: success()
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üöÄ Backend deployed to Render"
        echo "üåê Frontend will be deployed to Vercel automatically"
        
    - name: Deployment Failed
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details"
        exit 1