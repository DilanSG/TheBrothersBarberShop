# docker-compose.yml - The Brothers Barber Shop Development Environment
# Optimizado para desarrollo local con hot reload

version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      target: development
    container_name: barbershop-backend-dev
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=6h
      - JWT_REFRESH_EXPIRES_IN=30d
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - FRONTEND_URL=http://localhost:5173
      - ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - barbershop-network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: barbershop-frontend-dev
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000/api
      - VITE_FRONTEND_URL=http://localhost:5173
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - barbershop-network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: barbershop-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - barbershop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: barbershop-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - barbershop-network
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  redis-data:
    driver: local

networks:
  barbershop-network:
    driver: bridge
    name: barbershop-dev-network